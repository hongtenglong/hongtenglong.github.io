<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[JAVA多态学习笔记]]></title>
      <url>/2018/01/09/JAVA%E5%A4%9A%E6%80%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h2><ol>
<li>向上类型转换（隐式/自动类型转换），是小类型到大类型的转换<br>父类的引用是可以指向子类对象的</li>
<li>向下类型转换（强制类型转换），是大类型到小类型</li>
<li>instanceof运算符，来解决引用对象的类型，避免类型转换的安全性问题<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Animal obj1 = <span class="keyword">new</span> Animal();</div><div class="line"><span class="comment">//父类的引用是可以指向子类对象的</span></div><div class="line">Animal obj2 = <span class="keyword">new</span> Dog();</div><div class="line">Animal obj3 = <span class="keyword">new</span> Cat();</div><div class="line"></div><div class="line"><span class="comment">//Dog obj4 = new Animal(); //这是错的</span></div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Dog dog = new Dog();</div><div class="line">//自动类型提升  向上类型转换</div><div class="line">Animal animal = dog; </div><div class="line"></div><div class="line">// 向下类型转换  强制类型转换</div><div class="line">Dog dog2 = (Dog)animal;</div><div class="line">Cat cat = (Cat)animal; //编译时不报错，运行时会报错</div></pre></td></tr></table></figure>
<p>因为我们真正开辟的内存空间是Dog类型，当然不能转换成Cat类型，所以运行时就报错<br>所以我们要用到 <code>instanceof</code> 运算符<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Dog dog = <span class="keyword">new</span> Dog();</div><div class="line"><span class="comment">//自动类型提升  向上类型转换</span></div><div class="line">Animal animal = dog; </div><div class="line"></div><div class="line"><span class="comment">// 向下类型转换  强制类型转换</span></div><div class="line">Dog dog2 = (Dog)animal;</div><div class="line"><span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Cat)&#123;</div><div class="line">    Cat cat = (Cat)animal; </div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        System.out.println(<span class="string">"不能进行类型转换"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol>
<li><p>语法定义<br>抽象类前使用 <code>abstract</code> 关键字修饰</p>
</li>
<li><p>应用场景<br>抽象类只约束子类必须有哪些方法，而不关注子类如何实现。<br>在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p>
</li>
<li><p>使用规则<br>a. abstract 定义抽象类<br>b. bastract 定义抽象方法，只有声明，不需要实现<br>c. 包含抽象方法的类是抽象类<br>d. 抽象类中可以包含普通方法，也可以没有抽象方法<br>e. 抽象类不能直接创建，可以定义引用变量</p>
</li>
</ol>
<p>抽象类就是不能使用new方法进行实例化的类，即没有具体实例对象的类。抽象类有点类似“模板”的作用，目的是根据其格式来创建和修改新的类。对象不能由抽象类直接创建，只可以通过抽象类派生出新的子类，再由其子类来创建对象。当一个类被声明为抽象类时，要在这个类前面加上修饰符abstract。 在抽象类中的成员方法可以包括一般方法和抽象方法。<br>抽象方法就是以abstract修饰的方法，这种方法只声明返回的数据类型、方法名称和所需的参数，没有方法体，也就是说抽象方法只需要声明而不需要实现。当一个方法为抽象方法时，意味着这个方法必须被子类的方法所重写，否则其子类的该方法仍然是abstract的，而这个子类也必须是抽象的，即声明为abstract。<br>抽象类中不一定包含抽象方法，但是包含抽象方法的类一定要被声明为抽象类。抽象类本身不具备实际的功能，只能用于派生其子类。抽象类中可以包含构造方法，但是构造方法不能被声明为抽象。 抽象类不能用final来修饰，即一个类不能既是最终类又是抽象类。 abstract不能与private、static、final、native并列修饰同一个方法</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA实现邮箱验证]]></title>
      <url>/2018/01/08/JAVA%E5%AE%9E%E7%8E%B0%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<h2 id="什么是JavaMail"><a href="#什么是JavaMail" class="headerlink" title="什么是JavaMail"></a>什么是JavaMail</h2><p>JavaMail，顾名思义，提供给开发者处理电子邮件相关的编程接口。它是Sun发布的用来处理email的API。它可以方便地执行一些常用的邮件传输。我们可以基于JavaMail开发出类似于Microsoft Outlook的应用程序。<br><a id="more"></a></p>
<h2 id="邮件收发协议"><a href="#邮件收发协议" class="headerlink" title="邮件收发协议"></a>邮件收发协议</h2><ol>
<li><p>SMTP 协议（发送邮件）<br>SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。SMTP协议属于TCP/IP协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。通过SMTP协议所指定的服务器,就可以把E-mail寄到收信人的服务器上了，整个过程只要几分钟。SMTP服务器则是遵循SMTP协议的发送邮件服务器，用来发送或中转发出的电子邮件。<br>默认端口号是：25</p>
</li>
<li><p>POP3 协议（接收邮件）<br>POP3，全名为“Post Office Protocol - Version 3”，即“邮局协议版本3”。是TCP/IP协议族中的一员，由RFC1939 定义。<br>本协议主要用于支持使用客户端远程管理在服务器上的电子邮件。提供了SSL加密的POP3协议被称为POP3S。</p>
<p>POP 协议支持“离线”邮件处理。其具体过程是：邮件发送到服务器上，电子邮件客户端调用邮件客户机程序以连接服务器，并下载所有未阅读的电子邮件。这种离线访问模式是一种存储转发服务，将邮件从邮件服务器端送到个人终端机器上，一般是PC机或 MAC。一旦邮件发送到 PC 机或MAC上，邮件服务器上的邮件将会被删除。但目前的POP3邮件服务器大都可以“只下载邮件，服务器端并不删除”，也就是改进的POP3协议。<br>默认端口号是：110</p>
</li>
</ol>
<h2 id="邮件收发过程"><a href="#邮件收发过程" class="headerlink" title="邮件收发过程"></a>邮件收发过程</h2><p>假设有两个邮箱 A  和  B<br>A要发送邮件给B<br>A–&gt;SMTP服务器–&gt; B所在的服务器–&gt; POP3服务器 –&gt;B</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> zcp;  </div><div class="line"><span class="keyword">import</span> java.util.Date;  </div><div class="line"><span class="keyword">import</span> java.util.Properties;  </div><div class="line"><span class="keyword">import</span> javax.mail.Address;  </div><div class="line"><span class="keyword">import</span> javax.mail.Authenticator;  </div><div class="line"><span class="keyword">import</span> javax.mail.Message;  </div><div class="line"><span class="keyword">import</span> javax.mail.SendFailedException;  </div><div class="line"><span class="keyword">import</span> javax.mail.Session;  </div><div class="line"><span class="keyword">import</span> javax.mail.Transport;  </div><div class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;  </div><div class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mail</span> </span>&#123;  </div><div class="line">      </div><div class="line"><span class="comment">//  private String host = "smtp.yeah.net";  </span></div><div class="line">    <span class="keyword">private</span> String host = <span class="string">"smtp.qq.com"</span>;  </div><div class="line">    <span class="keyword">private</span> String mail_head_name = <span class="string">"this is head of this mail"</span>;  </div><div class="line">    <span class="keyword">private</span> String mail_head_value = <span class="string">"this is head of this mail"</span>;  </div><div class="line">    <span class="keyword">private</span> String mail_to = <span class="string">"zhang854429783@yeah.net"</span>;  </div><div class="line">    <span class="keyword">private</span> String mail_from = <span class="string">"zhang854429783@qq.com"</span>;  </div><div class="line">    <span class="keyword">private</span> String mail_subject = <span class="string">"邮件主题"</span>;  </div><div class="line">    <span class="keyword">private</span> String mail_body = <span class="string">"邮件内容"</span>;  </div><div class="line">    <span class="keyword">private</span> String personalName = <span class="string">"我的邮件"</span>;<span class="comment">//相当于称呼，通常显示在你的发件人栏的发件人邮箱地址前  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> <span class="keyword">throws</span> SendFailedException </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            Properties props = <span class="keyword">new</span> Properties();<span class="comment">// 获取系统环境  </span></div><div class="line">            props.put(<span class="string">"mail.smtp.host"</span>, host);  </div><div class="line">            props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);  </div><div class="line">            System.out.println(props);  </div><div class="line">            Authenticator auth = <span class="keyword">new</span> Email_Autherticator();<span class="comment">// 进行邮件服务用户认证  </span></div><div class="line">            Session session = Session.getDefaultInstance(props, auth);<span class="comment">// 设置session,和邮件服务器进行通讯  </span></div><div class="line">            MimeMessage message = <span class="keyword">new</span> MimeMessage(session);  </div><div class="line">            message.setContent(<span class="string">"Hello"</span>, <span class="string">"text/plain"</span>);<span class="comment">// 设置邮件格式  </span></div><div class="line">            <span class="comment">/** </span></div><div class="line"><span class="comment">             * setText("Email Content. ")默认的MIME类型是 text/plain如果只是发普通文本， </span></div><div class="line"><span class="comment">             * 可以用它来代替setContent("Hello", "text/plain") </span></div><div class="line"><span class="comment">             */</span>  </div><div class="line"><span class="comment">//          message.setText("Email Content. ");  </span></div><div class="line">            message.setSubject(mail_subject);<span class="comment">// 设置邮件主题  </span></div><div class="line">            message.setText(mail_body);<span class="comment">// 设置邮件内容  </span></div><div class="line">            message.setHeader(mail_head_name, mail_head_value);<span class="comment">// 设置邮件标题  </span></div><div class="line">            message.setSentDate(<span class="keyword">new</span> Date());<span class="comment">// 设置邮件发送时期  </span></div><div class="line">            Address address = <span class="keyword">new</span> InternetAddress(mail_from, personalName);  </div><div class="line">            message.setFrom(address);<span class="comment">// 设置邮件发送者的地址  </span></div><div class="line">            Address toaddress = <span class="keyword">new</span> InternetAddress(mail_to);<span class="comment">// 设置邮件接收者的地址  </span></div><div class="line">            message.addRecipient(Message.RecipientType.TO, toaddress);  </div><div class="line">            System.out.println(message);  </div><div class="line">            Transport.send(message);  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            System.out.println(<span class="string">"发送失败！"</span>);  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">// return flag;  </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> zcp;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Mail m = <span class="keyword">new</span> Mail();  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            m.sendMail();  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">              </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="http://blog.csdn.net/zhang854429783/article/details/6446635" target="_blank" rel="external">http://blog.csdn.net/zhang854429783/article/details/6446635</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA多线程笔记]]></title>
      <url>/2018/01/07/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p> 线程是指一个任务从头至尾的执行流。线程提供了运行一个任务的机制。对于Java而言，可以在一个程序中并发地启动多个线程。这些线程可以在多处理器系统上同时运行。</p>
<h2 id="runnable接口-和-Thread类"><a href="#runnable接口-和-Thread类" class="headerlink" title="runnable接口 和 Thread类"></a>runnable接口 和 Thread类</h2><a id="more"></a>
<ul>
<li>runnable 接口<br>任务类必须实现runnable接口，它只包含一个run方法。需要实现这个方法来告诉系统线程将如何运行。</li>
</ul>
<ul>
<li>Thread类<br>包含为任务而创建的线程的构造方法，以及控制线程的方法。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">类别</th>
<th style="text-align:left">方法签名</th>
<th style="text-align:left">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">线程的创建</td>
<td style="text-align:left">Thread()</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">线程的创建</td>
<td style="text-align:left">Thread(String name)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">线程的创建</td>
<td style="text-align:left">Thread(Runnable target)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">线程的创建</td>
<td style="text-align:left">Thread(Runnable target,String name)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">线程的方法</td>
<td style="text-align:left">void start()</td>
<td style="text-align:left">启动线程</td>
</tr>
<tr>
<td style="text-align:left">线程的方法</td>
<td style="text-align:left">static void sleep(long mills)</td>
<td style="text-align:left">线程休眠</td>
</tr>
<tr>
<td style="text-align:left">线程的方法</td>
<td style="text-align:left">static void sleep(long mills,int nanos)</td>
<td style="text-align:left">线程休眠(精确到纳秒)</td>
</tr>
<tr>
<td style="text-align:left">线程的方法</td>
<td style="text-align:left">void join()</td>
<td style="text-align:left">使其他线程等待当前线程终止</td>
</tr>
<tr>
<td style="text-align:left">线程的方法</td>
<td style="text-align:left">void join(long mills)</td>
<td style="text-align:left">使其他线程等待当前线程终止</td>
</tr>
<tr>
<td style="text-align:left">线程的方法</td>
<td style="text-align:left">void join(long mills,int nanos)</td>
<td style="text-align:left">使其他线程等待当前线程终止</td>
</tr>
<tr>
<td style="text-align:left">线程的方法</td>
<td style="text-align:left">static void yield()</td>
<td style="text-align:left">当前运行线程释放处理器资源</td>
</tr>
<tr>
<td style="text-align:left">获取线程的引用</td>
<td style="text-align:left">static Thread currentThread</td>
<td style="text-align:left">返回当前运行线程的引用</td>
</tr>
</tbody>
</table>
<h2 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h2><p> 为避免竞争状态，防止多个线程同时进入程序的某个特定部分，即临界区，以便一次只有一个线程可以访问临界区。</p>
<h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p> 用在多线程，同步变量。 线程为了提高效率，将某成员变量(如A)拷贝了一份（如B），线程中对A的访问其实访问的是B。只在某些动作时才进行A和B的同步。因此存在A和B不一致的情况。volatile就是用来避免这种情况的。volatile告诉jvm， 它所修饰的变量不保留拷贝，直接访问主内存中的（也就是上面说的A)<br> 转自：<a href="http://sakyone.iteye.com/blog/668091" target="_blank" rel="external">http://sakyone.iteye.com/blog/668091</a></p>
<h2 id="线程的互斥与同步"><a href="#线程的互斥与同步" class="headerlink" title="线程的互斥与同步"></a>线程的互斥与同步</h2><ul>
<li><p>互斥<br>指在某一时刻指允许一个进程运行其中的程序片，具有排他性和唯一性。<br>对于线程A和线程B来讲，在同一时刻，只允许一个线程对临界资源进行操作，即当A进入临界区对资源操作时，B就必须等待；当A执行完，退出临界区后，B才能对临界资源进行操作。</p>
</li>
<li><p>同步<br>指的是在互斥的基础上，实现进程之间的有序访问。假设现有线程A和线程B，线程A需要往缓冲区写数据，线程B需要从缓冲区读数据，但他们之间存在一种制约关系，即当线程A写的时候，B不能来拿数据；B在拿数据的时候A不能往缓冲区写，也就是说，只有当A写完数据（或B取走数据），B才能来读数据（或A才能往里写数据）。这种关系就是一种线程的同步关系。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>如何创建线程及线程的基本操作</li>
<li>可见性及volatile关键字</li>
<li>争用条件</li>
<li>线程的互斥synchronized</li>
<li>线程的同步wait/ notifyAll</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo的基础写作语法]]></title>
      <url>/2017/09/17/hexo%E7%9A%84%E5%9F%BA%E7%A1%80%E5%86%99%E4%BD%9C%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式</p>
<h3 id="类-Setext-形式"><a href="#类-Setext-形式" class="headerlink" title="类 Setext 形式"></a>类 Setext 形式</h3><p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p>
<pre><code>This is an H1
 =============

 This is an H2
 -------------
</code></pre><p>任何数量的 = 和 - 都可以有效果。</p>
<a id="more"></a>
<h3 id="类-Atx-形式"><a href="#类-Atx-形式" class="headerlink" title="类 Atx 形式"></a>类 Atx 形式</h3><p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
<pre><code># 这是 H1

 ## 这是 H2

 ###### 这是 H6
</code></pre><p>可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<pre><code># 这是 H1 #

 ## 这是 H2 ##

 ### 这是 H3 ######
</code></pre><h1 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h1><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>代码：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt;
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt;</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<p>代码：</p>
<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<blockquote>
<h4 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h4><ol>
<li>这是第一行列表项。</li>
<li>这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre></blockquote>
<p>代码：</p>
<pre><code>&gt; #### 这是一个标题。
&gt; 
&gt; 1.   这是第一行列表项。
&gt; 2.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><h2 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h2><p>使用 <em> 和 ** 表示斜体和粗体，格式如下：
</em>斜体<em>， <em>*粗体</em></em></p>
<pre><code>*斜体*， **粗体**
</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>在单独的一行使用 <em>*</em> 或者 — 表示分割线<br>中间有没有空格都可以</p>
<hr>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p> 使用 ~~ 表示删除线（~~ 和文字之间不加空格）<br><del>这是一段删除的文本</del></p>
<pre><code>~~这是一段删除的文本~~
</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://www.hongtenglong.top" title="我的主页" target="_blank" rel="external">Bazinga</a><br><a href="http://www.hongtenglong.top" target="_blank" rel="external">Bazinga</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[链接文字](链接地址 &quot;链接标题&quot;)</div><div class="line">[Bazinga](http://www.hongtenglong.top &quot;我的主页&quot;)</div><div class="line">[Bazinga](http://www.hongtenglong.top)</div></pre></td></tr></table></figure></p>
<p>链接标题的作用就是。。。。。。<br>当你把鼠标放到链接上就知道了</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>跟链接很像，只要在前面加个感叹号就可以了<br><img src="https://www.fineprintnyc.com/images/blog/history-of-logos/google/google-logo.png" alt="这是一张图片" title="google的logo"></p>
<pre><code>![这是一张图片](https://www.fineprintnyc.com/images/blog/history-of-logos/google/google-logo.png &quot;google的logo&quot;)
</code></pre><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<pre><code>这是一个代码区块。
</code></pre><p>如果要标记一小段行内代码，你可以用反引号把它包起来(`)，例如：我上面写的<code>&lt;pre&gt;</code>和 <code>&lt;code&gt;</code></p>
<p>也可以分别用三个反引号(`) 放在代码前后<br>（将下面的单引号换成反引号）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">var s = &apos;2&apos;</div><div class="line">&apos;&apos;&apos;</div></pre></td></tr></table></figure>
<p>在头三个（`）后面加上所用的语言的名称, 比如python<br>就可以出现高亮效果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var s = <span class="string">'2'</span></div></pre></td></tr></table></figure></p>
<h2 id="列表与表格"><a href="#列表与表格" class="headerlink" title="列表与表格"></a>列表与表格</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<ul>
<li>无序列表项 一<ul>
<li>子无序列表 一</li>
<li>子无序列表 二<ul>
<li>子无序列表 三</li>
</ul>
</li>
</ul>
</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ 无序列表项 一</div><div class="line">    - 子无序列表 一</div><div class="line">    - 子无序列表 二</div><div class="line">        * 子无序列表 三</div><div class="line">+ 无序列表项 二</div><div class="line">+ 无序列表项 三</div></pre></td></tr></table></figure>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>使用数字和点表示有序列表。</p>
<ol>
<li>有序列表项 一<ol>
<li>子有序列表项 一</li>
<li>子有序列表项 二</li>
</ol>
</li>
<li>有序列表项 二</li>
<li>有序列表项 三<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. 有序列表项 一</div><div class="line">    1. 子有序列表项 一</div><div class="line">    2. 子有序列表项 二</div><div class="line">2. 有序列表项 二</div><div class="line">3. 有序列表项 三</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>绘制表格格式如下，| 控制分列，- 控制分行，: 控制对齐方式。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Item</th>
<th style="text-align:right">Value</th>
<th style="text-align:center">Qty</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Computer</td>
<td style="text-align:right">1600 USD</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:left">Phone</td>
<td style="text-align:right">12 USD</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:left">Pipe</td>
<td style="text-align:right">1 USD</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| Item     | Value     | Qty   |</div><div class="line">| :------- | --------: | :---: |</div><div class="line">| Computer | 1600 USD  | 5     |</div><div class="line">| Phone    | 12 USD    | 12    |</div><div class="line">| Pipe     | 1 USD     | 234   |</div></pre></td></tr></table></figure>
<p>传送门： </p>
<ol>
<li><a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/" target="_blank" rel="external">https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo的基本操作]]></title>
      <url>/2017/09/16/hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init [folder]</div></pre></td></tr></table></figure>
<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<a id="more"></a>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>生成静态文件。</p>
<table><br><tr><td>选项</td> <td>描述</td></tr><br><tr><td>-d, –deploy</td><td>文件生成后立即部署网站</td></tr><br><tr><td>-w</td><td>–watch</td></tr><br></table>

<h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<p>发表草稿。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a><br>-p, –port        重设端口<br>-s, –static    只使用静态文件<br>-l, –log        启动日记记录，使用覆盖记录格式</p>
<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>部署网站。<br>-g, –generate    部署之前预先生成静态文件<br>该命令可以简写为：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo list &lt;type&gt;</div></pre></td></tr></table></figure>
<p>列出网站资料。</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo version</div></pre></td></tr></table></figure>
<p>显示 Hexo 版本。</p>
<h2 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo --safe</div></pre></td></tr></table></figure>
<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo --debug</div></pre></td></tr></table></figure>
<h2 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo --silent</div></pre></td></tr></table></figure>
<p>隐藏终端信息</p>
<h2 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo --draft</div></pre></td></tr></table></figure>
<h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>草稿是 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到 source/_drafts 文件夹，您可通过 publish 命令将草稿移动到 source/_posts 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 layout 来指定布局。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;title&gt;</div></pre></td></tr></table></figure><br>草稿默认不会显示在页面中，您可在执行时加上 –draft 参数，或是把 render_drafts 参数设为 true 来预览草稿。</p>
<p><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">官方文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
